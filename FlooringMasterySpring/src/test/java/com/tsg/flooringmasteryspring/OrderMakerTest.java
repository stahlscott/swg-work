/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.tsg.flooringmasteryspring;

import com.tsg.flooringmasteryspring.OrderMaker;
import com.tsg.flooringmasteryspring.dao.ProductDAOImpl;
import com.tsg.flooringmasteryspring.dao.ProductDAOInterface;
import com.tsg.flooringmasteryspring.dao.TaxDAOImpl;
import com.tsg.flooringmasteryspring.dao.TaxDAOInterface;
import com.tsg.flooringmasteryspring.dto.Order;
import java.io.FileNotFoundException;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

/**
 *
 * @author Scott Stahl <stahl.scott@gmail.com>
 */
public class OrderMakerTest {

    public OrderMakerTest() {
    }

    ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
    
    private TaxDAOInterface taxDAO;
    private ProductDAOInterface productDAO;
    private OrderMaker orderMaker;

    private Order orderProof;
    private Order orderProofNull;
    private Order orderProofModify;

    @Before
    public void setUp() {
        this.productDAO = ctx.getBean("productDAO", ProductDAOInterface.class);
        this.taxDAO = ctx.getBean("taxDAO", TaxDAOInterface.class);

        try {
            productDAO.loadProductFile();
            taxDAO.loadTaxFile();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(OrderMakerTest.class.getName()).log(Level.SEVERE, null, ex);
        }

        orderMaker = ctx.getBean("factory", OrderMaker.class);

        orderProof = new Order();
        // order creation info
        orderProof.setCustomerName("A. Testman");
        orderProof.setState("OH");
        orderProof.setProductType("Tile");
        orderProof.setArea(100.0);
        // this should be generated by OrderMaker
        orderProof.setTaxRate(6.25);
        orderProof.setCostPerSquareFoot(3.50);
        orderProof.setLabourCostPerSquareFoot(4.15);
        orderProof.setMaterialCost(350.0);
        orderProof.setLabourCost(415.00000000000006);
        orderProof.setTax(47.8125);
        orderProof.setTotal(812.8125);

        orderProofNull = new Order();
        // order creation info
        orderProofNull.setCustomerName("");
        orderProofNull.setState("not a state####");
        orderProofNull.setProductType("not a product$$$$");
        orderProofNull.setArea(0.0);
        // this should be generated by OrderMaker
        orderProofNull.setTaxRate(0.0);
        orderProofNull.setCostPerSquareFoot(0.0);
        orderProofNull.setLabourCostPerSquareFoot(0.0);
        orderProofNull.setMaterialCost(0.0);
        orderProofNull.setLabourCost(0.0);
        orderProofNull.setTax(0.0);
        orderProofNull.setTotal(0.0);

        orderProofModify = new Order();
        //order modification info
        orderProofModify.setCustomerName("B. Passman");
        orderProofModify.setState("MI");
        orderProofModify.setProductType("Carpet");
        orderProofModify.setArea(500.0);
        // these should be the correctly modified values
        orderProofModify.setTaxRate(5.75);
        orderProofModify.setCostPerSquareFoot(2.25);
        orderProofModify.setLabourCostPerSquareFoot(2.10);
        orderProofModify.setMaterialCost(1125.0);
        orderProofModify.setLabourCost(1050.0);
        orderProofModify.setTax(125.0625);
        orderProofModify.setTotal(2300.0625);

    }

    @After
    public void tearDown() {
    }

    // TODO try to break it or get null information - add thrown exceptions if information bad
    @Test // create order using above info 
    public void OrderMakerTestCreate1() {
        Order order = orderMaker.createOrder("A. Testman", "OH", "Tile", 100.0);

        assertEquals(orderProof, order);
    }

    @Test
    public void OrderMakerTestCreate2() {
        Order order = orderMaker.createOrder("", "not a state####", "not a product$$$$", 0.0);

        assertEquals(orderProofNull, order);
    }

    @Test
    public void OrderMakerTestModify1() {

        Order order = orderMaker.modifyOrder(orderProof, "B. Passman", "MI", "Carpet", 500.0);

        assertEquals(orderProofModify, order);
    }

    @Test
    public void OrderMakerTestModify2() {
        Order order = orderMaker.modifyOrder(orderProof, "", "not a state####", "not a product$$$$", 0.0);

        assertEquals(orderProofNull, order);
    }
}
